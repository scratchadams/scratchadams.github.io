<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - hypblog</title>
        <link>https://scratchadams.github.io/posts/</link>
        <description>All Posts | hypblog</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 28 Jun 2024 08:44:11 -0400</lastBuildDate><atom:link href="https://scratchadams.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Reverse Engineering Binary Protocols to Create IPS Signatures</title>
    <link>https://scratchadams.github.io/posts/ips-signatures/</link>
    <pubDate>Fri, 28 Jun 2024 08:44:11 -0400</pubDate>
    <author>hyp</author>
    <guid>https://scratchadams.github.io/posts/ips-signatures/</guid>
    <description><![CDATA[Reverse Engineering Binary Protocols to Create IPS Signatures The purpose of this article is to demonstrate some tools and techniques used in reverse engineering binary protocols from packet captures, and using the discovered fields and commonalities to create IPS signatures. I decided to write this article as there seemed to be limited information regarding protocol reverse engineering from network traffic and I figured this could be a good resource for people looking to learn more about the process.]]></description>
</item>
<item>
    <title>CVE-2018-1160</title>
    <link>https://scratchadams.github.io/posts/cve-2018-1160/</link>
    <pubDate>Thu, 27 Jun 2024 18:07:05 -0400</pubDate>
    <author>hyp</author>
    <guid>https://scratchadams.github.io/posts/cve-2018-1160/</guid>
    <description><![CDATA[CVE-2018–1160 Writeup CVE-2018–1160 is an out of bounds write in Netatalk versions prior to 3.1.12 which was disclosed by Jacob Baines of Tenable who also did a great writeup on this vulnerability that really helped in my investigation into how it works and how to exploit it.
Netatalk is an open source implementation of AFP, which is a file control protocol specifically designed for Mac based systems. AFP uses DSI as a session layer protocol to establish new sessions between the client and server.]]></description>
</item>
<item>
    <title>Qemu Escape Ctf</title>
    <link>https://scratchadams.github.io/posts/qemu-escape-ctf/</link>
    <pubDate>Thu, 27 Jun 2024 16:23:02 -0400</pubDate>
    <author>hyp</author>
    <guid>https://scratchadams.github.io/posts/qemu-escape-ctf/</guid>
    <description><![CDATA[Qemu Escape CTF Writeup This writeup will demonstrate my analysis and solution of the X-NUCA 2019 qemu escape CTF challenge. For those interested in following along or attempting the challenge themselves, the archive can be found at vexx.zip
Initial Analysis After extracting the archive, we are presented with the following files.
launch.sh is of interest here as it includes specific arguments for running this version of qemu, including a reference to a custom device named vexx.]]></description>
</item>
<item>
    <title>CVE-2021-33913</title>
    <link>https://scratchadams.github.io/posts/cve-2021-33913/</link>
    <pubDate>Thu, 27 Jun 2024 16:13:33 -0400</pubDate>
    <author>hyp</author>
    <guid>https://scratchadams.github.io/posts/cve-2021-33913/</guid>
    <description><![CDATA[CVE-2021–33913 Analysis CVE-2021–33913 is a heap-based buffer overflow that takes place in the SPF macro expansion process of the open source SPF library libspf2. According to the website, libspf2 is used by systems such as Sendmail, Postfix, Exim, Zmailer, and MS Exchange. This vulnerability was discovered along with CVE-2021–33912 by security researcher Nathaniel Bennett, who provided some details in a blog post: https://nathanielbennett.com/blog/libspf2-cve-jan-2022-disclosure along with a patch to fix both issues: https://github.]]></description>
</item>
<item>
    <title>Everything In Its Right Place: Pt3</title>
    <link>https://scratchadams.github.io/posts/heap3/</link>
    <pubDate>Thu, 27 Jun 2024 15:34:45 -0400</pubDate>
    <author>hyp</author>
    <guid>https://scratchadams.github.io/posts/heap3/</guid>
    <description><![CDATA[Exploring Memory allocation, vulnerabilities, and exploitation]]></description>
</item>
<item>
    <title>Everything In Its Right Place: Pt 2</title>
    <link>https://scratchadams.github.io/posts/heap2/</link>
    <pubDate>Thu, 27 Jun 2024 14:35:11 -0400</pubDate>
    <author>hyp</author>
    <guid>https://scratchadams.github.io/posts/heap2/</guid>
    <description><![CDATA[Exploring Memory allocation, vulnerabilities, and exploitation]]></description>
</item>
<item>
    <title>Everything In It&#39;s Right Place</title>
    <link>https://scratchadams.github.io/posts/heap1/</link>
    <pubDate>Thu, 27 Jun 2024 10:19:21 -0400</pubDate>
    <author>hyp</author>
    <guid>https://scratchadams.github.io/posts/heap1/</guid>
    <description><![CDATA[Exploring Memory allocation, vulnerabilities, and exploitation]]></description>
</item>
<item>
    <title>bggp5</title>
    <link>https://scratchadams.github.io/posts/bggp5/</link>
    <pubDate>Wed, 26 Jun 2024 12:09:09 -0400</pubDate>
    <author>hyp</author>
    <guid>https://scratchadams.github.io/posts/bggp5/</guid>
    <description><![CDATA[eBPF Filter For my (first) bggp5 entry, I wanted to do something with process injection. I decided to target cURL for obvious reasons.
I initially started off exploring what I could do with PTRACE, however the binary produced was pretty large (around 14kb) and I didnot have a good way of detecting when new curl processes started and attaching to them.
Thinking more about the problem of detecting newly started processes, I decided to look into eBPF as an option.]]></description>
</item>
</channel>
</rss>
